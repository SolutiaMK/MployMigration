//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsoleApplication1
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<GlobalEntity> GlobalEntities { get; set; }
        public virtual DbSet<Candidate> Candidates { get; set; }
        public virtual DbSet<MaxTravelType> MaxTravelTypes { get; set; }
        public virtual DbSet<CandidateNote> CandidateNotes { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<CompanyMailAddress> CompanyMailAddresses { get; set; }
        public virtual DbSet<GenderType> GenderTypes { get; set; }
        public virtual DbSet<SourceType> SourceTypes { get; set; }
        public virtual DbSet<MailingAddress> MailingAddresses { get; set; }
        public virtual DbSet<MailingAddressType> MailingAddressTypes { get; set; }
        public virtual DbSet<PersonMailAddress> PersonMailAddresses { get; set; }
        public virtual DbSet<ContactInformationType> ContactInformationTypes { get; set; }
        public virtual DbSet<PersonContactInformation> PersonContactInformations { get; set; }
        public virtual DbSet<CompanyContactInformation> CompanyContactInformations { get; set; }
        public virtual DbSet<Person> People { get; set; }
        public virtual DbSet<Requirement> Requirements { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
    
        public virtual ObjectResult<Nullable<int>> GetCompanyJobAssociation(Nullable<int> currentCompany)
        {
            var currentCompanyParameter = currentCompany.HasValue ?
                new ObjectParameter("currentCompany", currentCompany) :
                new ObjectParameter("currentCompany", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetCompanyJobAssociation", currentCompanyParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetCompanyContactAssociation(Nullable<int> currentContact)
        {
            var currentContactParameter = currentContact.HasValue ?
                new ObjectParameter("currentContact", currentContact) :
                new ObjectParameter("currentContact", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetCompanyContactAssociation", currentContactParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetJobPersonId(Nullable<int> currentContact)
        {
            var currentContactParameter = currentContact.HasValue ?
                new ObjectParameter("currentContact", currentContact) :
                new ObjectParameter("currentContact", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetJobPersonId", currentContactParameter);
        }
    
        public virtual ObjectResult<GetHiringActivityAssociation_Result3> GetHiringActivityAssociation(Nullable<int> currentJobId, Nullable<int> currentContact)
        {
            var currentJobIdParameter = currentJobId.HasValue ?
                new ObjectParameter("currentJobId", currentJobId) :
                new ObjectParameter("currentJobId", typeof(int));
    
            var currentContactParameter = currentContact.HasValue ?
                new ObjectParameter("currentContact", currentContact) :
                new ObjectParameter("currentContact", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetHiringActivityAssociation_Result3>("GetHiringActivityAssociation", currentJobIdParameter, currentContactParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetContactLogAssociation(Nullable<int> currentContact)
        {
            var currentContactParameter = currentContact.HasValue ?
                new ObjectParameter("currentContact", currentContact) :
                new ObjectParameter("currentContact", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetContactLogAssociation", currentContactParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetCompanyContactAssociation1(Nullable<int> currentContact)
        {
            var currentContactParameter = currentContact.HasValue ?
                new ObjectParameter("currentContact", currentContact) :
                new ObjectParameter("currentContact", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetCompanyContactAssociation1", currentContactParameter);
        }
    
        public virtual ObjectResult<CandidateDetail_Result> CandidateDetail(Nullable<int> candidateId)
        {
            var candidateIdParameter = candidateId.HasValue ?
                new ObjectParameter("CandidateId", candidateId) :
                new ObjectParameter("CandidateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CandidateDetail_Result>("CandidateDetail", candidateIdParameter);
        }
    
        public virtual ObjectResult<CreateNewCandidate_Result> CreateNewCandidate(string firstName, string lastName, string emailAddress, Nullable<int> candidateStatusTypeId, Nullable<int> desiredEmploymentTypeId, Nullable<int> currentEmploymentTypeId, Nullable<int> travelTypeId, Nullable<int> sourceTypeId, Nullable<int> maxTravelTypeId, Nullable<System.DateTime> availableDate, Nullable<System.DateTime> startDate, Nullable<int> currentSalary, Nullable<int> desiredSalary, Nullable<int> currentRate, Nullable<int> desiredRate, Nullable<bool> isOpenToRelocation, Nullable<int> recruiterId, Nullable<int> modifiedById)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var candidateStatusTypeIdParameter = candidateStatusTypeId.HasValue ?
                new ObjectParameter("CandidateStatusTypeId", candidateStatusTypeId) :
                new ObjectParameter("CandidateStatusTypeId", typeof(int));
    
            var desiredEmploymentTypeIdParameter = desiredEmploymentTypeId.HasValue ?
                new ObjectParameter("DesiredEmploymentTypeId", desiredEmploymentTypeId) :
                new ObjectParameter("DesiredEmploymentTypeId", typeof(int));
    
            var currentEmploymentTypeIdParameter = currentEmploymentTypeId.HasValue ?
                new ObjectParameter("CurrentEmploymentTypeId", currentEmploymentTypeId) :
                new ObjectParameter("CurrentEmploymentTypeId", typeof(int));
    
            var travelTypeIdParameter = travelTypeId.HasValue ?
                new ObjectParameter("TravelTypeId", travelTypeId) :
                new ObjectParameter("TravelTypeId", typeof(int));
    
            var sourceTypeIdParameter = sourceTypeId.HasValue ?
                new ObjectParameter("SourceTypeId", sourceTypeId) :
                new ObjectParameter("SourceTypeId", typeof(int));
    
            var maxTravelTypeIdParameter = maxTravelTypeId.HasValue ?
                new ObjectParameter("MaxTravelTypeId", maxTravelTypeId) :
                new ObjectParameter("MaxTravelTypeId", typeof(int));
    
            var availableDateParameter = availableDate.HasValue ?
                new ObjectParameter("AvailableDate", availableDate) :
                new ObjectParameter("AvailableDate", typeof(System.DateTime));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var currentSalaryParameter = currentSalary.HasValue ?
                new ObjectParameter("CurrentSalary", currentSalary) :
                new ObjectParameter("CurrentSalary", typeof(int));
    
            var desiredSalaryParameter = desiredSalary.HasValue ?
                new ObjectParameter("DesiredSalary", desiredSalary) :
                new ObjectParameter("DesiredSalary", typeof(int));
    
            var currentRateParameter = currentRate.HasValue ?
                new ObjectParameter("CurrentRate", currentRate) :
                new ObjectParameter("CurrentRate", typeof(int));
    
            var desiredRateParameter = desiredRate.HasValue ?
                new ObjectParameter("DesiredRate", desiredRate) :
                new ObjectParameter("DesiredRate", typeof(int));
    
            var isOpenToRelocationParameter = isOpenToRelocation.HasValue ?
                new ObjectParameter("IsOpenToRelocation", isOpenToRelocation) :
                new ObjectParameter("IsOpenToRelocation", typeof(bool));
    
            var recruiterIdParameter = recruiterId.HasValue ?
                new ObjectParameter("RecruiterId", recruiterId) :
                new ObjectParameter("RecruiterId", typeof(int));
    
            var modifiedByIdParameter = modifiedById.HasValue ?
                new ObjectParameter("ModifiedById", modifiedById) :
                new ObjectParameter("ModifiedById", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CreateNewCandidate_Result>("CreateNewCandidate", firstNameParameter, lastNameParameter, emailAddressParameter, candidateStatusTypeIdParameter, desiredEmploymentTypeIdParameter, currentEmploymentTypeIdParameter, travelTypeIdParameter, sourceTypeIdParameter, maxTravelTypeIdParameter, availableDateParameter, startDateParameter, currentSalaryParameter, desiredSalaryParameter, currentRateParameter, desiredRateParameter, isOpenToRelocationParameter, recruiterIdParameter, modifiedByIdParameter);
        }
    
        public virtual int AssignAccountabilityRecruiter(Nullable<System.Guid> globalEntityId, Nullable<int> personId)
        {
            var globalEntityIdParameter = globalEntityId.HasValue ?
                new ObjectParameter("GlobalEntityId", globalEntityId) :
                new ObjectParameter("GlobalEntityId", typeof(System.Guid));
    
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AssignAccountabilityRecruiter", globalEntityIdParameter, personIdParameter);
        }
    
        public virtual int CreateGlobalEntity(string entityTypeName, Nullable<int> createdById, ObjectParameter globalEntityId)
        {
            var entityTypeNameParameter = entityTypeName != null ?
                new ObjectParameter("EntityTypeName", entityTypeName) :
                new ObjectParameter("EntityTypeName", typeof(string));
    
            var createdByIdParameter = createdById.HasValue ?
                new ObjectParameter("CreatedById", createdById) :
                new ObjectParameter("CreatedById", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateGlobalEntity", entityTypeNameParameter, createdByIdParameter, globalEntityId);
        }
    
        public virtual int CreatePerson(Nullable<int> personId, string firstName, string lastName, string emailAddress, Nullable<int> modifiedById)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var modifiedByIdParameter = modifiedById.HasValue ?
                new ObjectParameter("ModifiedById", modifiedById) :
                new ObjectParameter("ModifiedById", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreatePerson", personIdParameter, firstNameParameter, lastNameParameter, emailAddressParameter, modifiedByIdParameter);
        }
    
        public virtual int SaveSalesRecruitingActivityLog(Nullable<int> activityLogId, Nullable<int> salesRecruitingWorkflowId, string salesRecruitingWorkflowName, Nullable<System.Guid> globalEntityId, string activityNote, string activityDetail, Nullable<int> loggedById)
        {
            var activityLogIdParameter = activityLogId.HasValue ?
                new ObjectParameter("ActivityLogId", activityLogId) :
                new ObjectParameter("ActivityLogId", typeof(int));
    
            var salesRecruitingWorkflowIdParameter = salesRecruitingWorkflowId.HasValue ?
                new ObjectParameter("SalesRecruitingWorkflowId", salesRecruitingWorkflowId) :
                new ObjectParameter("SalesRecruitingWorkflowId", typeof(int));
    
            var salesRecruitingWorkflowNameParameter = salesRecruitingWorkflowName != null ?
                new ObjectParameter("SalesRecruitingWorkflowName", salesRecruitingWorkflowName) :
                new ObjectParameter("SalesRecruitingWorkflowName", typeof(string));
    
            var globalEntityIdParameter = globalEntityId.HasValue ?
                new ObjectParameter("GlobalEntityId", globalEntityId) :
                new ObjectParameter("GlobalEntityId", typeof(System.Guid));
    
            var activityNoteParameter = activityNote != null ?
                new ObjectParameter("ActivityNote", activityNote) :
                new ObjectParameter("ActivityNote", typeof(string));
    
            var activityDetailParameter = activityDetail != null ?
                new ObjectParameter("ActivityDetail", activityDetail) :
                new ObjectParameter("ActivityDetail", typeof(string));
    
            var loggedByIdParameter = loggedById.HasValue ?
                new ObjectParameter("LoggedById", loggedById) :
                new ObjectParameter("LoggedById", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveSalesRecruitingActivityLog", activityLogIdParameter, salesRecruitingWorkflowIdParameter, salesRecruitingWorkflowNameParameter, globalEntityIdParameter, activityNoteParameter, activityDetailParameter, loggedByIdParameter);
        }
    
        public virtual int ReadCandidateContractType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ReadCandidateContractType");
        }
    
        public virtual ObjectResult<ReadContactLog_Result1> ReadContactLog()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReadContactLog_Result1>("ReadContactLog");
        }
    
        public virtual ObjectResult<ReadHiringActivity_Result1> ReadHiringActivity()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReadHiringActivity_Result1>("ReadHiringActivity");
        }
    
        public virtual ObjectResult<ReadJob_Result2> ReadJob()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReadJob_Result2>("ReadJob");
        }
    
        public virtual ObjectResult<ReadSourceType_Result3> ReadSourceType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReadSourceType_Result3>("ReadSourceType");
        }
    
        public virtual int UpdatePersonMployContactId(Nullable<int> personId, Nullable<int> mployContactId)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("personId", personId) :
                new ObjectParameter("personId", typeof(int));
    
            var mployContactIdParameter = mployContactId.HasValue ?
                new ObjectParameter("mployContactId", mployContactId) :
                new ObjectParameter("mployContactId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePersonMployContactId", personIdParameter, mployContactIdParameter);
        }
    
        public virtual int UpdateUserMployId(Nullable<int> personId, Nullable<int> mployUserId)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("personId", personId) :
                new ObjectParameter("personId", typeof(int));
    
            var mployUserIdParameter = mployUserId.HasValue ?
                new ObjectParameter("mployUserId", mployUserId) :
                new ObjectParameter("mployUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUserMployId", personIdParameter, mployUserIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetUserFromMployUserId(Nullable<int> mployUserId)
        {
            var mployUserIdParameter = mployUserId.HasValue ?
                new ObjectParameter("MployUserId", mployUserId) :
                new ObjectParameter("MployUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetUserFromMployUserId", mployUserIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertCustomerNote(Nullable<int> customerId, string note, Nullable<System.DateTime> createDate, Nullable<int> modifiedById)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var modifiedByIdParameter = modifiedById.HasValue ?
                new ObjectParameter("ModifiedById", modifiedById) :
                new ObjectParameter("ModifiedById", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertCustomerNote", customerIdParameter, noteParameter, createDateParameter, modifiedByIdParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> CheckCustomerAgainstCandidateData(Nullable<int> customerIdContact)
        {
            var customerIdContactParameter = customerIdContact.HasValue ?
                new ObjectParameter("CustomerIdContact", customerIdContact) :
                new ObjectParameter("CustomerIdContact", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("CheckCustomerAgainstCandidateData", customerIdContactParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertPersonContactInformation(Nullable<int> personId, Nullable<int> contactInformationTypeId, string contactData, Nullable<bool> preferredPhone, Nullable<bool> preferredEmail, Nullable<int> modifiedById)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(int));
    
            var contactInformationTypeIdParameter = contactInformationTypeId.HasValue ?
                new ObjectParameter("ContactInformationTypeId", contactInformationTypeId) :
                new ObjectParameter("ContactInformationTypeId", typeof(int));
    
            var contactDataParameter = contactData != null ?
                new ObjectParameter("ContactData", contactData) :
                new ObjectParameter("ContactData", typeof(string));
    
            var preferredPhoneParameter = preferredPhone.HasValue ?
                new ObjectParameter("PreferredPhone", preferredPhone) :
                new ObjectParameter("PreferredPhone", typeof(bool));
    
            var preferredEmailParameter = preferredEmail.HasValue ?
                new ObjectParameter("PreferredEmail", preferredEmail) :
                new ObjectParameter("PreferredEmail", typeof(bool));
    
            var modifiedByIdParameter = modifiedById.HasValue ?
                new ObjectParameter("ModifiedById", modifiedById) :
                new ObjectParameter("ModifiedById", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertPersonContactInformation", personIdParameter, contactInformationTypeIdParameter, contactDataParameter, preferredPhoneParameter, preferredEmailParameter, modifiedByIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertUser(Nullable<int> personId, string firstName, string lastName, string emailAddress, Nullable<int> modifiedById, Nullable<int> mPLOY_UserId)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var modifiedByIdParameter = modifiedById.HasValue ?
                new ObjectParameter("ModifiedById", modifiedById) :
                new ObjectParameter("ModifiedById", typeof(int));
    
            var mPLOY_UserIdParameter = mPLOY_UserId.HasValue ?
                new ObjectParameter("MPLOY_UserId", mPLOY_UserId) :
                new ObjectParameter("MPLOY_UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertUser", personIdParameter, firstNameParameter, lastNameParameter, emailAddressParameter, modifiedByIdParameter, mPLOY_UserIdParameter);
        }
    
        public virtual ObjectResult<ReadUser_Result2> ReadUser()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReadUser_Result2>("ReadUser");
        }
    
        public virtual ObjectResult<InsertCompany_Result9> InsertCompany(string companyName, Nullable<int> companyTypeId, Nullable<int> industryId, Nullable<int> revenueSizeTypeId, Nullable<int> employeeSizeTypeId, Nullable<int> billingFrequencyTypeId, Nullable<int> billingMethodTypeId, Nullable<int> salesPersonId, Nullable<int> modifiedById, Nullable<int> mployOrganizationId, Nullable<int> mployIdUser)
        {
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var companyTypeIdParameter = companyTypeId.HasValue ?
                new ObjectParameter("CompanyTypeId", companyTypeId) :
                new ObjectParameter("CompanyTypeId", typeof(int));
    
            var industryIdParameter = industryId.HasValue ?
                new ObjectParameter("IndustryId", industryId) :
                new ObjectParameter("IndustryId", typeof(int));
    
            var revenueSizeTypeIdParameter = revenueSizeTypeId.HasValue ?
                new ObjectParameter("RevenueSizeTypeId", revenueSizeTypeId) :
                new ObjectParameter("RevenueSizeTypeId", typeof(int));
    
            var employeeSizeTypeIdParameter = employeeSizeTypeId.HasValue ?
                new ObjectParameter("EmployeeSizeTypeId", employeeSizeTypeId) :
                new ObjectParameter("EmployeeSizeTypeId", typeof(int));
    
            var billingFrequencyTypeIdParameter = billingFrequencyTypeId.HasValue ?
                new ObjectParameter("BillingFrequencyTypeId", billingFrequencyTypeId) :
                new ObjectParameter("BillingFrequencyTypeId", typeof(int));
    
            var billingMethodTypeIdParameter = billingMethodTypeId.HasValue ?
                new ObjectParameter("BillingMethodTypeId", billingMethodTypeId) :
                new ObjectParameter("BillingMethodTypeId", typeof(int));
    
            var salesPersonIdParameter = salesPersonId.HasValue ?
                new ObjectParameter("SalesPersonId", salesPersonId) :
                new ObjectParameter("SalesPersonId", typeof(int));
    
            var modifiedByIdParameter = modifiedById.HasValue ?
                new ObjectParameter("ModifiedById", modifiedById) :
                new ObjectParameter("ModifiedById", typeof(int));
    
            var mployOrganizationIdParameter = mployOrganizationId.HasValue ?
                new ObjectParameter("MployOrganizationId", mployOrganizationId) :
                new ObjectParameter("MployOrganizationId", typeof(int));
    
            var mployIdUserParameter = mployIdUser.HasValue ?
                new ObjectParameter("MployIdUser", mployIdUser) :
                new ObjectParameter("MployIdUser", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertCompany_Result9>("InsertCompany", companyNameParameter, companyTypeIdParameter, industryIdParameter, revenueSizeTypeIdParameter, employeeSizeTypeIdParameter, billingFrequencyTypeIdParameter, billingMethodTypeIdParameter, salesPersonIdParameter, modifiedByIdParameter, mployOrganizationIdParameter, mployIdUserParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertCompanyContactInformation(Nullable<int> companyId, Nullable<int> contactInformationTypeId, string phoneNumber, string fax, string uRL, Nullable<int> modifiedById)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var contactInformationTypeIdParameter = contactInformationTypeId.HasValue ?
                new ObjectParameter("ContactInformationTypeId", contactInformationTypeId) :
                new ObjectParameter("ContactInformationTypeId", typeof(int));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var uRLParameter = uRL != null ?
                new ObjectParameter("URL", uRL) :
                new ObjectParameter("URL", typeof(string));
    
            var modifiedByIdParameter = modifiedById.HasValue ?
                new ObjectParameter("ModifiedById", modifiedById) :
                new ObjectParameter("ModifiedById", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertCompanyContactInformation", companyIdParameter, contactInformationTypeIdParameter, phoneNumberParameter, faxParameter, uRLParameter, modifiedByIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertCompanyMailingAddress(Nullable<int> companyId, string line1, string city, string state, string zip, Nullable<int> modifiedById)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var line1Parameter = line1 != null ?
                new ObjectParameter("Line1", line1) :
                new ObjectParameter("Line1", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(string));
    
            var modifiedByIdParameter = modifiedById.HasValue ?
                new ObjectParameter("ModifiedById", modifiedById) :
                new ObjectParameter("ModifiedById", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertCompanyMailingAddress", companyIdParameter, line1Parameter, cityParameter, stateParameter, zipParameter, modifiedByIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertCompanyNote(Nullable<int> companyId, string note, Nullable<int> modifiedById)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var modifiedByIdParameter = modifiedById.HasValue ?
                new ObjectParameter("ModifiedById", modifiedById) :
                new ObjectParameter("ModifiedById", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertCompanyNote", companyIdParameter, noteParameter, modifiedByIdParameter);
        }
    
        public virtual ObjectResult<ReadCompanyType_Result1> ReadCompanyType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReadCompanyType_Result1>("ReadCompanyType");
        }
    
        public virtual ObjectResult<ReadOrganization_Result4> ReadOrganization()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReadOrganization_Result4>("ReadOrganization");
        }
    
        public virtual ObjectResult<ReadContact_Result3> ReadContact()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReadContact_Result3>("ReadContact");
        }
    
        public virtual ObjectResult<ReadPerson_Result9> ReadPerson()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReadPerson_Result9>("ReadPerson");
        }
    
        public virtual ObjectResult<InsertCustomer_Result2> InsertCustomer(Nullable<int> companyId, Nullable<int> personId, Nullable<int> sourceTypeId, Nullable<int> customerTypeId, string title, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<System.DateTime> createDate, Nullable<int> modifiedById, Nullable<int> mployOrganizationId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(int));
    
            var sourceTypeIdParameter = sourceTypeId.HasValue ?
                new ObjectParameter("SourceTypeId", sourceTypeId) :
                new ObjectParameter("SourceTypeId", typeof(int));
    
            var customerTypeIdParameter = customerTypeId.HasValue ?
                new ObjectParameter("CustomerTypeId", customerTypeId) :
                new ObjectParameter("CustomerTypeId", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var modifiedByIdParameter = modifiedById.HasValue ?
                new ObjectParameter("ModifiedById", modifiedById) :
                new ObjectParameter("ModifiedById", typeof(int));
    
            var mployOrganizationIdParameter = mployOrganizationId.HasValue ?
                new ObjectParameter("MployOrganizationId", mployOrganizationId) :
                new ObjectParameter("MployOrganizationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertCustomer_Result2>("InsertCustomer", companyIdParameter, personIdParameter, sourceTypeIdParameter, customerTypeIdParameter, titleParameter, startDateParameter, endDateParameter, createDateParameter, modifiedByIdParameter, mployOrganizationIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertPerson(Nullable<int> personId, string firstName, string lastName, Nullable<int> genderTypeId, Nullable<int> modifiedById, Nullable<System.DateTime> createDate, Nullable<int> mPLOY_ContactId, Nullable<int> mPLOY_UserId)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var genderTypeIdParameter = genderTypeId.HasValue ?
                new ObjectParameter("GenderTypeId", genderTypeId) :
                new ObjectParameter("GenderTypeId", typeof(int));
    
            var modifiedByIdParameter = modifiedById.HasValue ?
                new ObjectParameter("ModifiedById", modifiedById) :
                new ObjectParameter("ModifiedById", typeof(int));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var mPLOY_ContactIdParameter = mPLOY_ContactId.HasValue ?
                new ObjectParameter("MPLOY_ContactId", mPLOY_ContactId) :
                new ObjectParameter("MPLOY_ContactId", typeof(int));
    
            var mPLOY_UserIdParameter = mPLOY_UserId.HasValue ?
                new ObjectParameter("MPLOY_UserId", mPLOY_UserId) :
                new ObjectParameter("MPLOY_UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertPerson", personIdParameter, firstNameParameter, lastNameParameter, genderTypeIdParameter, modifiedByIdParameter, createDateParameter, mPLOY_ContactIdParameter, mPLOY_UserIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> FindCustomerOrganizationId(Nullable<int> personId, Nullable<int> mployOrganizationId)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("personId", personId) :
                new ObjectParameter("personId", typeof(int));
    
            var mployOrganizationIdParameter = mployOrganizationId.HasValue ?
                new ObjectParameter("mployOrganizationId", mployOrganizationId) :
                new ObjectParameter("mployOrganizationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("FindCustomerOrganizationId", personIdParameter, mployOrganizationIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertPersonMailingAddress(Nullable<int> personId, string line1, string city, string state, string zip, Nullable<int> modifiedById)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(int));
    
            var line1Parameter = line1 != null ?
                new ObjectParameter("Line1", line1) :
                new ObjectParameter("Line1", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(string));
    
            var modifiedByIdParameter = modifiedById.HasValue ?
                new ObjectParameter("ModifiedById", modifiedById) :
                new ObjectParameter("ModifiedById", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertPersonMailingAddress", personIdParameter, line1Parameter, cityParameter, stateParameter, zipParameter, modifiedByIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertCandidateNote(Nullable<int> candidateId, string note, Nullable<System.DateTime> createDate, Nullable<int> modifiedById)
        {
            var candidateIdParameter = candidateId.HasValue ?
                new ObjectParameter("CandidateId", candidateId) :
                new ObjectParameter("CandidateId", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var modifiedByIdParameter = modifiedById.HasValue ?
                new ObjectParameter("ModifiedById", modifiedById) :
                new ObjectParameter("ModifiedById", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertCandidateNote", candidateIdParameter, noteParameter, createDateParameter, modifiedByIdParameter);
        }
    
        public virtual ObjectResult<InsertCandidate_Result4> InsertCandidate(Nullable<int> personId, Nullable<int> candidateStatusTypeId, Nullable<int> desiredEmploymentTypeId, Nullable<int> currentEmploymentTypeId, Nullable<int> travelTypeId, Nullable<int> sourceTypeId, Nullable<int> maxTravelTypeId, Nullable<System.DateTime> availableDate, Nullable<System.DateTime> startDate, Nullable<int> currentSalary, Nullable<int> desiredSalary, Nullable<int> currentRate, Nullable<int> desiredRate, Nullable<int> referralId, string resumeSummary, Nullable<bool> isOpenToRelocation, Nullable<int> modifiedById, Nullable<System.DateTime> createDate, Nullable<int> mPLOY_OrganizationId)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(int));
    
            var candidateStatusTypeIdParameter = candidateStatusTypeId.HasValue ?
                new ObjectParameter("CandidateStatusTypeId", candidateStatusTypeId) :
                new ObjectParameter("CandidateStatusTypeId", typeof(int));
    
            var desiredEmploymentTypeIdParameter = desiredEmploymentTypeId.HasValue ?
                new ObjectParameter("DesiredEmploymentTypeId", desiredEmploymentTypeId) :
                new ObjectParameter("DesiredEmploymentTypeId", typeof(int));
    
            var currentEmploymentTypeIdParameter = currentEmploymentTypeId.HasValue ?
                new ObjectParameter("CurrentEmploymentTypeId", currentEmploymentTypeId) :
                new ObjectParameter("CurrentEmploymentTypeId", typeof(int));
    
            var travelTypeIdParameter = travelTypeId.HasValue ?
                new ObjectParameter("TravelTypeId", travelTypeId) :
                new ObjectParameter("TravelTypeId", typeof(int));
    
            var sourceTypeIdParameter = sourceTypeId.HasValue ?
                new ObjectParameter("SourceTypeId", sourceTypeId) :
                new ObjectParameter("SourceTypeId", typeof(int));
    
            var maxTravelTypeIdParameter = maxTravelTypeId.HasValue ?
                new ObjectParameter("MaxTravelTypeId", maxTravelTypeId) :
                new ObjectParameter("MaxTravelTypeId", typeof(int));
    
            var availableDateParameter = availableDate.HasValue ?
                new ObjectParameter("AvailableDate", availableDate) :
                new ObjectParameter("AvailableDate", typeof(System.DateTime));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var currentSalaryParameter = currentSalary.HasValue ?
                new ObjectParameter("CurrentSalary", currentSalary) :
                new ObjectParameter("CurrentSalary", typeof(int));
    
            var desiredSalaryParameter = desiredSalary.HasValue ?
                new ObjectParameter("DesiredSalary", desiredSalary) :
                new ObjectParameter("DesiredSalary", typeof(int));
    
            var currentRateParameter = currentRate.HasValue ?
                new ObjectParameter("CurrentRate", currentRate) :
                new ObjectParameter("CurrentRate", typeof(int));
    
            var desiredRateParameter = desiredRate.HasValue ?
                new ObjectParameter("DesiredRate", desiredRate) :
                new ObjectParameter("DesiredRate", typeof(int));
    
            var referralIdParameter = referralId.HasValue ?
                new ObjectParameter("ReferralId", referralId) :
                new ObjectParameter("ReferralId", typeof(int));
    
            var resumeSummaryParameter = resumeSummary != null ?
                new ObjectParameter("ResumeSummary", resumeSummary) :
                new ObjectParameter("ResumeSummary", typeof(string));
    
            var isOpenToRelocationParameter = isOpenToRelocation.HasValue ?
                new ObjectParameter("IsOpenToRelocation", isOpenToRelocation) :
                new ObjectParameter("IsOpenToRelocation", typeof(bool));
    
            var modifiedByIdParameter = modifiedById.HasValue ?
                new ObjectParameter("ModifiedById", modifiedById) :
                new ObjectParameter("ModifiedById", typeof(int));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var mPLOY_OrganizationIdParameter = mPLOY_OrganizationId.HasValue ?
                new ObjectParameter("MPLOY_OrganizationId", mPLOY_OrganizationId) :
                new ObjectParameter("MPLOY_OrganizationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertCandidate_Result4>("InsertCandidate", personIdParameter, candidateStatusTypeIdParameter, desiredEmploymentTypeIdParameter, currentEmploymentTypeIdParameter, travelTypeIdParameter, sourceTypeIdParameter, maxTravelTypeIdParameter, availableDateParameter, startDateParameter, currentSalaryParameter, desiredSalaryParameter, currentRateParameter, desiredRateParameter, referralIdParameter, resumeSummaryParameter, isOpenToRelocationParameter, modifiedByIdParameter, createDateParameter, mPLOY_OrganizationIdParameter);
        }
    }
}
